import pandas as pd
import os
import matplotlib.pyplot as plt
import re
import numpy as np
import time
import math

# definisco una funzione per spostare all' inizio gli articoli The|A|An nei titoli in cui compaiono alla fine
def fix_title(title):
    return re.sub(r'^(.*), (The|A|An) (\(\d{4}\))$', r'\2 \1 \3', title)

# definisco una funzione per rimuovere eventuali parentesi tonde con delle stringhe, lasciando però quelle con gli anni
def remove_parentheses(title):
    return re.sub(r'\s*\((?!\d{4}\))[^)]*\)', '', title)

# definisco una funzione per convertire gli anni tra parentesi quadre in anni tra parentesi tonde
def fix_brackets(title):
    return re.sub(r'\[(\d{4})\]', r'(\1)', title)

# definisco una funzione per calcolare il normalized discounted cumulative gain che poi richiamerò nella funzione principale
def ndcg(recommendations,preferences):
    relevances = [1 if rec in preferences else 0 for rec in recommendations]
    dcg = 0
    idcg = 0
    for i in range(0,len(recommendations)):
        dcg += relevances[i]/math.log2(2+i)
        idcg += 1/math.log2(2+i)
    return dcg/idcg if idcg > 0 else 0

def simulation(data_set, models_list, client, users_list, num_of_users, train_ratio, recomm_to_test, directory):

    print(users_list)
    print(num_of_users)

    # creo dizionario per archiviare liste di recommendations
    recommendations = {}

    # creo dizionario per archiviare risultati e metriche
    data = {'train_ratio': [0], 'user': [0], 'model': [0], 'prompt': [0], 'jaccard': [0],
            'test_set': [0], 'recommendations': [0], 'precision': [0], 'recall': [0], 'NDCG': [0]}
    df_output = pd.DataFrame(data)

    # ciclo per utente, modello e prompt
    for userID in users_list[0:num_of_users]:
        userID = int(userID)
        # quanti item, tra quelli disponibili, passo nel prompt al modello come preferenze note dell' utente?
        set_size = len(data_set[data_set['userID'] == userID])
        train_set_size = int(set_size * train_ratio)
        train_set = data_set[data_set['userID'] == userID].iloc[0:train_set_size]
        test_set = data_set[data_set['userID'] == userID].iloc[train_set_size:]
        train_set = train_set[['title', 'rating', 'movieID']].sort_values('rating', ascending=False)
        test_set = test_set[['title', 'rating', 'movieID']].sort_values('rating', ascending=False)

        # converto il df pandas con il test set in un dizionario/set eliminando le parentesi dai titoli e spostando all' inizio del titolo gli articoli
        test_list = [remove_parentheses(frase) for frase in test_set['title'].tolist()]
        test_list = [fix_title(frase) for frase in test_list]
        reference_set = set(test_list)

        # converto il df pandas con le preferenze dell'utente in una stringa da passare agli LLMs
        user_pref = ', '.join(str(row['title']) for _, row in train_set.iterrows())
        #print(f"The preferences are \n {user_pref}")

        # creo i 3 prompt
        recommended_items = len(test_set) * recomm_to_test
        prompt_CoT_0 = f"The user {userID} likes the following movies: {user_pref}. Think step by step and then\
            suggest me {recommended_items} ranked movies, based on these preferences: without any premise and without specifying your reasoning,\
            please provide only movies' names and the year of making between round brackets. Do not include the titles between brackets and if you don't\
            have enough items to suggest, do not suggest made-up movies or suggest the same movies more than once: simply stop the list"
        prompt_CoT_1 = f"Q) I like Interstellar (2014) and Inception (2010), provide me 1 suggestion, based on these preferences:\
            A) The movies that you like are both science fiction movies, directed by Christopher Nolan.\
            The first one is set in the future, when climate changes have made large areas of the planet sterile, no more suitable\
            for the agriculture, producing a huge food crisis and pushing the mankind to look for an alternative planet, outside our solar system.\
            Physics, hunger for discovery and love intertwine to make an exciting and breathtaking movie.\
            The second one is the story of a thief and his technology that enables him to read the mind of people through sharing common dreams.\
            A top-company director asks him for help to use this technology to implant an idea into the mind of the company owner.\
            I suggest you: Shutter island (2010).\
            Q) You know that the user {userID} likes the following movies: {user_pref}.\
            Suggest me {recommended_items} ranked movies, based on these preferences: without any premise and without specifying your reasoning,\
            please provide only movies' names and the year of making between round brackets. Do not include the titles between brackets and if you don't\
            have enough items to suggest, do not suggest made-up movies or suggest the same movies more than once: simply stop the list"
        prompt_GK = f"Input) I like Interstellar (2014) and Inception (2010).\
            Knowledge) Interstellar (2014): A former pilot joins a mission to find a new habitable planet as Earth faces collapse.\
            Traveling through a wormhole, he confronts the mysteries of time and love, ultimately aiding humanity’s survival through\
            a connection with his daughter across dimensions. Inception (2010): A thief enters layered dreams to plant an idea in a target’s mind.\
            Battling guilt and blurred reality, he completes the mission while questioning whether he’s still dreaming in the film’s ambiguous ending.\
            Input) The user {userID} likes {user_pref}.\
            Knowledge) "
        prompts = {
            "prompt_CoT_0": prompt_CoT_0,
            "prompt_CoT_1": prompt_CoT_1,
            "prompt_GK": prompt_GK
        }

        # invio richiesta
        for type_prompt, prompt in prompts.items():
            for my_model in models_list:
                response_to_list = []

                # creo un file .txt nella directory definita, in cui archiviare la risposta per prompt e per modello
                file_gross = os.path.join(directory,
                                    f'train_ratio_{train_ratio * 100}_user_{userID}_model_{my_model}_prompt_{type_prompt}_gross.txt')
                file_net = os.path.join(directory,
                                          f'train_ratio_{train_ratio * 100}_user_{userID}_model_{my_model}_prompt_{type_prompt}_net.txt')
                try:
                    completion = client.chat.completions.create(
                        model=my_model,
                        messages=[{"role": "user", "content": prompt}],
                        temperature=0,
                        max_tokens=1024,
                        top_p=1,
                        stream=False,
                        stop=None,
                    )
                    # estraggo la risposta come un oggetto di tipo stringa
                    response = completion.choices[0].message.content

                    # per il prompt generated knowledge genero il prompt definitivo
                    if type_prompt == "prompt_GK":
                        # print(f"The knowledge generated is {completion.choices[0].message.content}")
                        prompt = f"Question) The user {userID} likes {user_pref}. Please suggest {recommended_items} ranked movies, based on these preferences.\
                                    without any premise and without specifying your reasoning, please provide only the titles and the year of making\
                                     between round brackets. Do not include the titles between brackets and if you don't\
                                    have enough items to suggest, do not suggest made-up movies or suggest the same movies more than once: simply stop the list\
                                    Knowledge) {response}\
                                    Answer)"
                        completion = client.chat.completions.create(
                            model=my_model,
                            messages=[{"role": "user", "content": prompt}],
                            temperature=0,
                            max_tokens=1024,
                            top_p=1,
                            stream=False,
                            stop=None,
                        )
                        response = completion.choices[0].message.content
                    #print(f"The response is:\n {response}")

                    # salvo la risposta grezza in un file di testo
                    with open(file_gross, 'w') as f:
                        f.write(response)

                    # converto la risposta in una lista iterabile
                    for i in range(0, recommended_items - 1):
                        index_start = response.find(f"{i + 1}.")
                        index_end = response.find(f"{i + 2}.")
                        response_to_list.append(str(response[index_start + 3:index_end - 1]))
                    response_to_list.append(str(response[index_end + 3:]))

                    # rimuovo gli asterischi
                    response_to_list = [frase.strip('* ') for frase in response_to_list]

                    # rimuovo eventuali parentesi che includano altre note, ma non quelle che includono l'anno
                    response_to_list = [remove_parentheses(frase) for frase in response_to_list]

                    # sposto l'articolo all'inizio del titolo se per caso si trova alla fine
                    response_to_list = [fix_title(frase) for frase in response_to_list]

                    # trasformo parentesi quadre in tonde
                    response_to_list = [fix_brackets(frase) for frase in response_to_list]

                    # salvo la lista corretta in un altro file di testo
                    with open(file_net, 'w') as f:
                        f.write('\n'.join(response_to_list))

                    print(f"Based on {train_set_size} preferences of user {userID}, {recommended_items} suggestions with prompt {type_prompt}\
                    and model {my_model} are:\n{response_to_list}")

                    # salvo la risposta come lista in un dizionario
                    recommendations[f"train_ratio_{train_ratio * 100}_user{userID}_{my_model}_{type_prompt}"] = [response_to_list]

                    '''
                    # stampo l'id degli item suggeriti e presenti nel test_set
                    matchings = test_set[test_set['name'].apply(lambda x: x in response_to_list)][['name', 'bookID']]

                    if matchings.empty:
                        print(f"No matchings found for the user {userID}, the model {my_model}, prompted with {type_prompt}")
                    else:
                        print(f"For the user {userID}, the model {my_model}, prompted with {type_prompt}, has recommended the following items already "
                          f"known to be appreciated:\n {matchings}")
                    '''

                    # calcolo le metriche
                    #print(f"The recommendations are: {set(response_to_list)}")
                    #print(f"The reference set is: {reference_set}")
                    jacc = len(set(response_to_list) & reference_set)/len(set(response_to_list) | reference_set)
                    prec = len(set(response_to_list) & reference_set)/len(response_to_list)
                    rec = len(set(response_to_list) & reference_set)/len(test_set)
                    NDCG = ndcg(response_to_list,test_list)

                    # aggiorno il dataframe di output con i risultati dell' iterazione
                    row = pd.DataFrame(
                        {'train_ratio': [f"{train_ratio:.0%}"], 'user': [userID], 'model': [my_model], 'prompt': [type_prompt],
                         'jaccard': [jacc], #[f"{jacc:.1%}"],
                         'test_set': [reference_set],
                         'recommendations': [set(response_to_list)],
                         'precision': [prec], #[f"{prec:.1%}"],
                         'recall': [rec], #[f"{rec:.1%}"],
                         'NDCG': [NDCG] #[f"{NDCG:.1%}"]
                         })
                    df_output = pd.concat([df_output, row], ignore_index=True)
                except Exception as e:
                    print("Errore durante la richiesta: ", e)
            time.sleep(60)
    df_output.drop(index=0, inplace=True)
    return df_output
